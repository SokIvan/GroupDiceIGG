import json
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from Patterns.PatternManager import PatternManager
from Patterns.TableRenderer import TableRenderer
from config import BOT_TOKEN, ADMIN_CHAT_ID, MY_TG_ID
from database import Database
import asyncio

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)
db = Database()

# States
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_new_name = State()
    waiting_for_fake_name = State()
    waiting_for_name_to_delete = State()
    waiting_for_user_to_remove = State()
    waiting_for_user_to_rename = State()
    waiting_pattern_selection = State()
    waiting_pattern_add = State()

# Inline keyboards
def get_registration_keyboard(request_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{request_id}"),
            InlineKeyboardButton(text="‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data=f"reject_{request_id}")
        ]
    ])

def get_role_keyboard(request_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëë –õ–∏–¥–µ—Ä", callback_data=f"role_leader_{request_id}"),
            InlineKeyboardButton(text="‚öîÔ∏è –°–æ–ª–¥–∞—Ç", callback_data=f"role_soldier_{request_id}")
        ],
        [
            InlineKeyboardButton(text="üë§ –£—á–∞—Å—Ç–Ω–∏–∫", callback_data=f"role_member_{request_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"role_reject_{request_id}")
        ]
    ])

def get_main_menu_keyboard(is_admin: bool = False, is_god: bool = False):
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–æ–º–µ–Ω—è—Ç—å –∏–º—è", callback_data="change_name")],
        [InlineKeyboardButton(text="üìà –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ", callback_data="request_promotion")],
        [InlineKeyboardButton(text="üö™ –£–π—Ç–∏", callback_data="leave")]
    ]
    
    if is_admin or is_god:
        keyboard.extend([
            [InlineKeyboardButton(text="üë§ –ü–æ–º–µ–Ω—è—Ç—å –∏–º—è –¥—Ä—É–≥–æ–º—É", callback_data="change_other_name")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ", callback_data="remove_other")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –∏–º—è", callback_data="add_fake_name")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –∏–º—è", callback_data="delete_fake_name")],
            [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="view_table")]
        ])
        
    if is_god:
        keyboard.extend([
            [InlineKeyboardButton(text="üìÑ –ó–∞–¥–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω", callback_data="add_pattern")],
            [InlineKeyboardButton(text="üìë –ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω", callback_data="set_pattern")],
        ])

    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)





def get_self_role_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëë –õ–∏–¥–µ—Ä", callback_data="self_role_leader"),
            InlineKeyboardButton(text="‚öîÔ∏è –°–æ–ª–¥–∞—Ç", callback_data="self_role_soldier")
        ],
        [
            InlineKeyboardButton(text="üë§ –£—á–∞—Å—Ç–Ω–∏–∫", callback_data="self_role_member"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ])

async def get_user_with_admin_check(tg_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    user = await db.get_user(tg_id)
    is_admin = await db.is_admin(tg_id)
    return user, is_admin

# Start command
@router.message(Command("start"))
async def cmd_start(message: Message):
    user, is_admin = await get_user_with_admin_check(message.from_user.id)
    
    if not user:
        # New user - show registration
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏."
        )
    else:
        if user["status"] == "approved":
            # Approved user
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['username']}!\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–∏–∫: {user['player_name']}\n"
                f"–í–∞—à–∞ —Ä–æ–ª—å: {user['role']}\n"
                f"{'üëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else ''}",
                reply_markup=get_main_menu_keyboard(is_admin,message.from_user.id == int(MY_TG_ID))
            )
        else:
            # Pending user
            await message.answer(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

# Help command
@router.message(Command("help"))
async def cmd_help(message: Message):
    user, is_admin = await get_user_with_admin_check(message.from_user.id)
    
    if user and user["status"] == "approved":
        help_text = (
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "‚úèÔ∏è –ü–æ–º–µ–Ω—è—Ç—å –∏–º—è - –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫\n"
            "üìà –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏\n"
            "üö™ –£–π—Ç–∏ - –ø–æ–∫–∏–Ω—É—Ç—å –∞–ª—å—è–Ω—Å\n\n"
        )
        
        if is_admin:
            help_text += (
                "üë§ –ü–æ–º–µ–Ω—è—Ç—å –∏–º—è –¥—Ä—É–≥–æ–º—É - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
                "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∞–ª—å—è–Ω—Å–∞\n"
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –∏–º—è - –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è –±–µ–∑ Telegram\n"
                "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –∏–º—è - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –∏–º—è\n"
                "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É - –ø–æ–ª—É—á–∏—Ç—å Excel —Ç–∞–±–ª–∏—Ü—É\n"
            )
        if message.from_user.id == int(MY_TG_ID):
                        help_text += (
                "üìÑ –ó–∞–¥–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω - –∑–∞–¥–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Ç–∞–±–ª–∏—Ü—ã\n"
                "üìë –ü–æ–º–µ–Ω—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω - –≤—ã–±–∏—Ä–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö\n"
                "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
                "/list_chats - —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ NICK\n"
                "/add_chat - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã NICK –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç\n"
                "/remove_chat - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã NICK –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n"
                "/grant_admin <id> - –≤—ã–¥–∞–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º id\n"
            )
        
        await message.answer(help_text, reply_markup=get_main_menu_keyboard(is_admin,message.from_user.id == int(MY_TG_ID)))
    else:
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")

# Register command
@router.message(Command("register"))
async def cmd_register(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    tag = f"@{username}" if username else f"id{user_id}"
    
    # Check if already registered
    existing_user = await db.get_user(user_id)
    if existing_user:
        if existing_user["status"] == "pending":
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    # Add to database with pending status
    if await db.add_user(user_id, username, tag, "pending"):
        # Send request to admin chat
        request_text = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üè∑Ô∏è –¢–µ–≥: {tag}\n"
            f"üÜî TG ID: {user_id}\n\n"
            f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É Dice."
        )
        
        await bot.send_message(
            ADMIN_CHAT_ID,
            request_text,
            reply_markup=get_registration_keyboard(user_id)
        )
        
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Registration approval callbacks
@router.callback_query(F.data.startswith("approve_"))
async def approve_registration(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[1])
    
    # Update user status
    if await db.update_user_status(user_id, "approved"):
        # Notify user
        await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.")
        
        # Update admin message
        await callback.message.edit_text(
            f"‚úÖ {callback.from_user.username} –æ–¥–æ–±—Ä–∏–ª –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            reply_markup=None
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!", show_alert=True)

@router.callback_query(F.data.startswith("reject_"))
async def reject_registration(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[1])
    
    # Delete user
    if await db.delete_user(user_id):
        # Notify user
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        
        # Update admin message
        await callback.message.edit_text(
            f"‚ùå {callback.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            reply_markup=None
        )
        await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!", show_alert=True)

# Change name
@router.callback_query(F.data == "change_name")
async def change_name_start(callback: CallbackQuery, state: FSMContext):
    user, is_admin = await get_user_with_admin_check(callback.from_user.id)
    if not user or user["status"] != "approved":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", show_alert=True)
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫:")
    await state.set_state(RegistrationStates.waiting_for_new_name)
    await callback.answer()

@router.message(RegistrationStates.waiting_for_new_name)
async def change_name_finish(message: Message, state: FSMContext):
    new_name = message.text.strip()
    
    if await db.update_user_name(message.from_user.id, new_name):
        await message.answer(f"‚úÖ –í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_name}")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

# Request promotion
@router.callback_query(F.data == "request_promotion")
async def request_promotion(callback: CallbackQuery):
    user, is_admin = await get_user_with_admin_check(callback.from_user.id)
    if not user or user["status"] != "approved":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", show_alert=True)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω - –æ–Ω –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –º–µ–Ω—è—Ç—å —Å–µ–±–µ —Ä–æ–ª—å
    if is_admin:
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è —Å–µ–±—è:",
            reply_markup=get_self_role_keyboard()
        )
    else:
        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞–º
        request_text = (
            f"üìà –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏:\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username']}\n"
            f"üè∑Ô∏è –¢–µ–≥: {user['tag']}\n"
            f"üÜî TG ID: {user['tg_id']}\n"
            f"üìä –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {user['role']}\n\n"
            f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏."
        )
        
        await bot.send_message(
            ADMIN_CHAT_ID,
            request_text,
            reply_markup=get_role_keyboard(user['tg_id'])
        )
        
        await callback.message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
    await callback.answer()

# Role change callbacks
@router.callback_query(F.data.startswith("role_"))
async def handle_role_change(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    data_parts = callback.data.split("_")
    action = data_parts[1]
    user_id = int(data_parts[2])
    
    if action == "reject":
        await callback.message.edit_text(
            f"‚ùå {callback.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏",
            reply_markup=None
        )
        await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
        return
    
    role_map = {
        "leader": "–ª–∏–¥–µ—Ä",
        "soldier": "—Å–æ–ª–¥–∞—Ç", 
        "member": "—É—á–∞—Å—Ç–Ω–∏–∫"
    }
    
    new_role = role_map.get(action)
    if new_role and await db.update_user_role(user_id, new_role):
        # Notify user
        await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_role}")
        
        # Update admin message
        await callback.message.edit_text(
            f"‚úÖ {callback.from_user.username} –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞: {new_role}",
            reply_markup=None
        )
        await callback.answer("–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏!", show_alert=True)

# Self role change for admins
@router.callback_query(F.data.startswith("self_role_"))
async def handle_self_role_change(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    role_map = {
        "self_role_leader": "–ª–∏–¥–µ—Ä",
        "self_role_soldier": "—Å–æ–ª–¥–∞—Ç", 
        "self_role_member": "—É—á–∞—Å—Ç–Ω–∏–∫"
    }
    
    new_role = role_map.get(callback.data)
    if new_role and await db.update_user_role(callback.from_user.id, new_role):
        await callback.message.answer(f"‚úÖ –í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_role}")
        await callback.answer()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏!", show_alert=True)

# Leave alliance
@router.callback_query(F.data == "leave")
async def leave_alliance(callback: CallbackQuery):
    user, is_admin = await get_user_with_admin_check(callback.from_user.id)
    if not user or user["status"] != "approved":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!", show_alert=True)
        return
    
    if await db.delete_user(callback.from_user.id):
        await callback.message.answer("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∞–ª—å—è–Ω—Å. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        await callback.answer()
    else:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–ª—å—è–Ω—Å–∞!", show_alert=True)

# Admin commands
@router.callback_query(F.data == "change_other_name")
async def change_other_name_start(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`123456789 –ù–æ–≤—ã–π–ù–∏–∫`")
    await state.set_state(RegistrationStates.waiting_for_user_to_rename)
    await callback.answer()

@router.message(RegistrationStates.waiting_for_user_to_rename)
async def change_other_name_finish(message: Message, state: FSMContext):
    try:
        parts = message.text.strip().split(' ', 1)
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `123456789 –ù–æ–≤—ã–π–ù–∏–∫`")
            return
        
        user_id = int(parts[0])
        new_name = parts[1]
        
        # Check if target is admin
        if await db.is_admin(user_id):
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if await db.update_user_name(user_id, new_name):
            await message.answer(f"‚úÖ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_name}")
            # Notify user
            await bot.send_message(user_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à –Ω–∏–∫ –Ω–∞: {new_name}")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    
    await state.clear()

@router.callback_query(F.data == "remove_other")
async def remove_other_start(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(RegistrationStates.waiting_for_user_to_remove)
    await callback.answer()

@router.message(RegistrationStates.waiting_for_user_to_remove)
async def remove_other_finish(message: Message, state: FSMContext):
    try:
        user_player_name = message.text.strip()
        user_id = 0
        user = await db.get_user_by_player_name(user_player_name)
        if user:
            user_id = user['tg_id']

        # Check if target is admin
        if await db.is_admin(user_id):
            await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        if await db.delete_user(user_id):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–ª—å—è–Ω—Å–∞.")
            # Notify user
            await bot.send_message(user_id, "üö™ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ –∞–ª—å—è–Ω—Å–∞.")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    
    await state.clear()

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏
@router.callback_query(F.data == "add_fake_name")
async def add_fake_name_start(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –∏–º—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ò–≥—Ä–æ–∫123 —É—á–∞—Å—Ç–Ω–∏–∫`\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: —É—á–∞—Å—Ç–Ω–∏–∫, —Å–æ–ª–¥–∞—Ç, –ª–∏–¥–µ—Ä"
    )
    await state.set_state(RegistrationStates.waiting_for_fake_name)
    await callback.answer()

@router.message(RegistrationStates.waiting_for_fake_name)
async def add_fake_name_finish(message: Message, state: FSMContext):
    try:
        parts = message.text.strip().split(' ', 1)
        if len(parts) == 1:
            # –¢–æ–ª—å–∫–æ –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            player_name = parts[0]
            role = "—É—á–∞—Å—Ç–Ω–∏–∫"
        else:
            player_name = parts[0]
            role = parts[1].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
        valid_roles = ["—É—á–∞—Å—Ç–Ω–∏–∫", "—Å–æ–ª–¥–∞—Ç", "–ª–∏–¥–µ—Ä"]
        if role not in valid_roles:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —É—á–∞—Å—Ç–Ω–∏–∫, —Å–æ–ª–¥–∞—Ç –∏–ª–∏ –ª–∏–¥–µ—Ä")
            return
        
        if await db.add_fake_name(player_name, role):
            await message.answer(f"‚úÖ –§–∏–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ '{player_name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é '{role}'!")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞!")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await state.clear()

# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏
@router.callback_query(F.data == "delete_fake_name")
async def delete_fake_name_start(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    fake_names = await db.get_all_fake_names()
    if not fake_names:
        await callback.message.answer("‚ùå –ù–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return
    
    keyboard = []
    for fake in fake_names:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üóëÔ∏è {fake['player_name']} ({fake['role']})",
                callback_data=f"delete_fake_{fake['id']}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("delete_fake_"))
async def delete_fake_name_handler(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    fake_id = int(callback.data.split("_")[2])
    
    if await db.delete_fake_name(fake_id):
        await callback.message.edit_text("‚úÖ –§–∏–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω!")
        await callback.answer()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞!", show_alert=True)

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
@router.callback_query(F.data == "view_table")
async def view_table(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –∏–≥—Ä–æ–∫–æ–≤
    all_players = await db.get_all_players()
    recent_players = await db.get_recent_players()
    leaders = await db.get_leaders()
    soldiers = await db.get_soldiers()
    regular_members = await db.get_regular_members()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    summary = (
        f"üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª—å—è–Ω—Å–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(all_players)}\n"
        f"üì± Telegram –∏–≥—Ä–æ–∫–æ–≤: {len([p for p in all_players if p['player_type'] == 'telegram'])}\n"
        f"üë§ –§–∏–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len([p for p in all_players if p['player_type'] == 'fake'])}\n"
        f"üëë –õ–∏–¥–µ—Ä–æ–≤: {len(leaders)}\n"
        f"‚öîÔ∏è –°–æ–ª–¥–∞—Ç: {len(soldiers)}\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(regular_members)}\n"
        f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –∑–∞ 24—á: {len(recent_players)}\n\n"
    )
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ª–∏–¥–µ—Ä–∞–º
    if leaders:
        summary += "üëë –õ–∏–¥–µ—Ä—ã:\n"
        for player in leaders:
            emoji = "ü§ñ" if player['player_type'] == 'fake' else "üë§"
            summary += f"{emoji} {player['player_name']}\n"
        summary += "\n"
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–æ–ª–¥–∞—Ç–∞–º
    if soldiers:
        summary += "‚öîÔ∏è –°–æ–ª–¥–∞—Ç—ã:\n"
        for player in soldiers:
            emoji = "ü§ñ" if player['player_type'] == 'fake' else "üë§"
            summary += f"{emoji} {player['player_name']}\n"
        summary += "\n"
    
    # –ù–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if recent_players:
        summary += "‚úèÔ∏è –ù–µ–¥–∞–≤–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã:\n"
        for player in recent_players:
            emoji = "ü§ñ" if player['player_type'] == 'fake' else "üë§"
            role_emoji = "üëë" if player['role'] == '–ª–∏–¥–µ—Ä' else "‚öîÔ∏è" if player['role'] == '—Å–æ–ª–¥–∞—Ç' else "üë§"
            summary += f"{emoji} {role_emoji} {player['player_name']}\n"
    
    
    
    pattern_manager = PatternManager(db)
    pattern = await pattern_manager.get_active_pattern()
    
    if not pattern:
        await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤     
    users_response = await db.get_all_players()
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ –ª–∏–¥–µ—Ä–æ–≤, —Å–æ–ª–¥–∞—Ç –∏ –æ–±–Ω–æ–≤–∏–≤—à–∏—Ö
    # (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–∏—Ö —Å–ø–∏—Å–∫–æ–≤)
    leaders = await db.get_leaders()  # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –ª–∏–¥–µ—Ä–æ–≤
    soldiers = await db.get_soldiers()  # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–ª–¥–∞—Ç
    updated_players = await db.get_recent_players()  # –ò–≥—Ä–æ–∫–∏, –æ–±–Ω–æ–≤–∏–≤—à–∏–µ –∏–º—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
    
    renderer = TableRenderer()
    grouped_players = renderer.group_players_by_pattern(users_response, pattern)
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_buf = renderer.create_table_image(pattern, grouped_players, leaders, soldiers, updated_players)
    
    
    await callback.message.answer_photo(InputFile(image_buf, filename='player_table.png'),caption=summary)
    await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞!")
# Cancel handler
@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# Grant admin command (only for you)
@router.message(Command("grant_admin"))
async def cmd_grant_admin(message: Message):
    if message.from_user.id != int(MY_TG_ID):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        # Extract user ID from command: /grant_admin 123456789
        target_id = int(message.text.split()[1])
        target_user = await bot.get_chat(target_id)
        
        if await db.add_admin(target_id, target_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"):
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
            await bot.send_message(target_id, "üéâ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–ø—Ä—è–º—É—é.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
    
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /grant_admin <user_id>")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        

# –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
@router.message(Command("add_chat"))
async def cmd_add_chat(message: Message):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ"""
    if message.from_user.id != int(MY_TG_ID):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    chat_id = message.chat.id
    chat_title = message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    if await db.is_chat_allowed(chat_id):
        await message.answer("‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö!")
        return
    
    if await db.add_allowed_chat(chat_id, chat_title):
        await message.answer(f"‚úÖ –ß–∞—Ç '{chat_title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞!")

@router.message(Command("remove_chat"))
async def cmd_remove_chat(message: Message):
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    if message.from_user.id != int(MY_TG_ID):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    chat_id = message.chat.id
    chat_title = message.chat.title or "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    if not await db.is_chat_allowed(chat_id):
        await message.answer("‚ùå –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö!")
        return
    
    if await db.remove_allowed_chat(chat_id):
        await message.answer(f"‚úÖ –ß–∞—Ç '{chat_title}' —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞!")

@router.message(Command("list_chats"))
async def cmd_list_chats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    if message.from_user.id != int(MY_TG_ID):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    allowed_chats = await db.get_all_allowed_chats()
    if not allowed_chats:
        await message.answer("üìù –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return
    
    chat_list = "üìù –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:\n\n"
    for chat in allowed_chats:
        chat_list += f"‚Ä¢ ID: {chat['chat_id']}\n"
        chat_list += f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {chat['chat_title']}\n"
        chat_list += f"  –î–æ–±–∞–≤–ª–µ–Ω: {chat['created_at'][:10]}\n\n"
    
    await message.answer(chat_list)
    

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è +NICK <–°–≤–æ–µ –∏–º—è>
@router.message(F.text.startswith("+NICK "))
async def handle_plus_nick(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —á–∞—Ç
    if not await db.is_chat_allowed(message.chat.id):
        return
    
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    tag = f"@{username}" if username else f"id{user_id}"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        player_name = message.text[6:].strip()  # –£–±–∏—Ä–∞–µ–º "+NICK "
        if not player_name:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ +NICK")
            return
    except:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: +NICK –í–∞—à–µ–ò–º—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = await db.get_user(user_id)
    
    if existing_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        if await db.update_user_name(user_id, player_name):
            await message.reply(f"‚úÖ –í–∞—à –Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {player_name}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await bot.send_message(
                    user_id,
                    f"‚úÖ –í–∞—à –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {player_name}\n"
                )
            except:
                pass  # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –õ–°
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∏–∫–∞")
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if await db.add_user(user_id, username, tag, "approved"):
            # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
            await db.update_user_name(user_id, player_name)
            
            await message.reply(f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–∏–∫–æ–º: {player_name}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await bot.send_message(
                    user_id,
                    f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–ª—å—è–Ω—Å Dice!\n"
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–∏–∫–æ–º: {player_name}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."
                )
            except:
                pass  # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –õ–°
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è !NICK <–ï–≥–æ –∏–º—è> (–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
@router.message(F.text.startswith("!NICK "))
async def handle_exclamation_nick(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —á–∞—Ç
    if not await db.is_chat_allowed(message.chat.id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    if not await db.is_admin(message.from_user.id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return
    
    target_user = message.reply_to_message.from_user
    target_id = target_user.id
    target_username = target_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    target_tag = f"@{target_username}" if target_username else f"id{target_id}"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        player_name = message.text[6:].strip()  # –£–±–∏—Ä–∞–µ–º "!NICK "
        if not player_name:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ !NICK")
            return
    except:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !NICK –ò–º—è–ò–≥—Ä–æ–∫–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = await db.get_user(target_id)
    
    if existing_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        if await db.update_user_name(target_id, player_name):
            await message.reply(f"‚úÖ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {player_name}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(
                    target_id,
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à –Ω–∏–∫ –Ω–∞: {player_name}"
                )
            except:
                pass
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∏–∫–∞")
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        if await db.add_user(target_id, target_username, target_tag, "approved"):
            # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
            await db.update_user_name(target_id, player_name)
            
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–∏–∫–æ–º: {player_name}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(
                    target_id,
                    f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–ª—å—è–Ω—Å Dice!\n"
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –≤–∞—Å —Å –Ω–∏–∫–æ–º: {player_name}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."
                )
            except:
                pass
        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
@router.message(F.text.startswith("NICKS"))
async def handle_get_all_nick(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç–∞ –≤ allowed_chats
    if not db.is_chat_allowed(message.chat.id):
        await message.answer("–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ player_name
    users_response = db.client.table('users')\
        .select('tag, player_name')\
        .order('player_name')\
        .execute()
    
    if not users_response.data:
        await message.answer("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫
    users_list = []
    for index, user in enumerate(users_response.data, 1):
        tag = user.get('tag', 'N/A')
        player_name = user.get('player_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        users_list.append(f"{index}. {tag} - {player_name}")
    
    response_text = "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n\n" + "\n".join(users_list)
    
    await message.answer(response_text)




















from aiogram.types import  ReplyKeyboardMarkup, KeyboardButton

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —á–µ—Ä–µ–∑ JSON
@router.callback_query(F.data == "add_pattern")
async def cmd_add_pattern(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n{"name": "DiceTeam", "elements": ["üé≤","‚ö°","üéØ"], "mas_elements": [["üé≤"],["‚ö°"],["üéØ"]]}')
    await state.set_state(RegistrationStates.waiting_pattern_add)
    await callback.answer()



@router.message(RegistrationStates.waiting_pattern_add)
async def process_pattern_selection(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —á–µ—Ä–µ–∑ JSON –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    try:
        data = json.loads(message.text)
        pattern_manager = PatternManager(db)
        await pattern_manager.create_pattern(
            data['name'],
            data['elements'],
            data['mas_elements']
        )
        
        await message.answer(f"‚úÖ–ü–∞—Ç—Ç–µ—Ä–Ω '{data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        
    except json.JSONDecodeError:
        await message.answer("‚ùå–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
    except KeyError as e:
        await message.answer(f"‚ùå–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {e}")
    await state.clear()
    

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
@router.callback_query(F.data == "set_pattern")
async def cmd_set_pattern(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    pattern_manager = PatternManager(db)
    patterns = await pattern_manager.get_all_patterns()
    
    if not patterns:
        await callback.message.answer("‚ùå–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
    inline_buttons = []

    for pattern in patterns:
        status = "‚úÖ" if pattern.status == "Active" else "‚ùå"
        inline_buttons.append([InlineKeyboardButton(text = f"{status} {pattern.pattern_name} (ID: {pattern.id})", callback_data=f"PATTERN {pattern.id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", reply_markup=keyboard)
    await state.set_state(RegistrationStates.waiting_pattern_selection)
    await callback.answer()


@router.callback_query(RegistrationStates.waiting_pattern_selection)
async def process_pattern_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        pattern_id = int(callback.data.split(" ")[-1])
        
        pattern_manager = PatternManager(db)
        await pattern_manager.set_active_pattern(pattern_id)
        
        await callback.message.answer("‚úÖ–ü–∞—Ç—Ç–µ—Ä–Ω —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", reply_markup=types.ReplyKeyboardRemove())
        
        
    except (IndexError, ValueError):
        await callback.message.answer("‚ùå–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()
